1. Find the number of questions that have received more than 300 points or have been bookmarked at least 100 times.
SELECT COUNT(*) 
FROM stackoverflow.posts
WHERE post_type_id= 1 AND (score > 300 OR favorites_count > 99 )

2. What is the average number of questions asked per day from November 1st to November 18th, 2008, inclusive? Round the result to the nearest whole number.

WITH l1 AS 
(SELECT DISTINCT creation_date::date, COUNT(DISTINCT title) AS c1
FROM stackoverflow.posts
WHERE post_type_id = 1 AND (creation_date::date BETWEEN '2008-11-01' AND '2008-11-18')
GROUP BY creation_date::date)
SELECT ROUND(AVG(c1),0)
FROM l1

3. How many users received badges on the same day they registered? Display the count of unique users.
SELECT  COUNT(DISTINCT user_id)
FROM stackoverflow.users 
        JOIN stackoverflow.badges ON stackoverflow.badges.user_id = stackoverflow.users.id AND stackoverflow.badges.creation_date::date = stackoverflow.users.creation_date::date

4. How many unique posts by a user with the name Joel Coehoorn received at least one vote?
SELECT COUNT(DISTINCT p.id)

FROM stackoverflow.posts AS p 
    JOIN stackoverflow.votes AS v ON p.id = v.post_id 
    JOIN stackoverflow.users AS u ON p.user_id = u.id
WHERE u.display_name = 'Joel Coehoorn' AND v.vote_type_id IS NOT NULL


5. Retrieve all fields from the vote_types table. Add a 'rank' field to the table containing the reverse order of record numbers. Sort the table by the 'id' field.

SELECT *, RANK() OVER (ORDER BY id DESC)
FROM stackoverflow.vote_types
ORDER BY id

6. Select the top 10 users who have cast the most 'Close' votes. Display a table with two fields: user ID and the number of votes. Sort the data first by the number of votes in descending order, and then by the user ID in descending order.

SELECT DISTINCT v.user_id , COUNT(v.vote_type_id) OVER (PARTITION BY v.user_id)
FROM stackoverflow.votes AS v   JOIN
    stackoverflow.vote_types AS vt ON vt.id = v.vote_type_id
WHERE vt.name = 'Close'
ORDER BY 2 DESC,1 DESC
LIMIT 10

7. Select the top 10 users based on the number of badges received between November 15 and December 15, 2008, inclusive. Display several fields:
* User ID
* Number of badges
* Ranking - Users with the same number of badges should have the same ranking.
Sort the records by the number of badges in descending order and then by the user ID in ascending order.

SELECT *, DENSE_RANK() OVER (ORDER BY c1 DESC)
FROM 
(SELECT DISTINCT user_id, COUNT(id) OVER (PARTITION BY user_id) AS c1
FROM stackoverflow.badges
WHERE creation_date::date BETWEEN '2008-11-15' AND '2008-12-15'
) AS tmp
ORDER BY c1 DESC, user_id ASC
LIMIT 10

8. Calculate the average score received by each user. Create a table with the following fields:
* Post title
* User ID
* Post score
* Average user score per post, rounded to the nearest whole number.

Exclude posts without titles and those with a score of zero.


9. Display the titles of posts written by users who have received more than 1000 badges. Exclude posts without titles.


SELECT DISTINCT title
FROM stackoverflow.posts AS p JOIN
    stackoverflow.users AS u ON u.id = p.user_id JOIN
    stackoverflow.badges AS b ON b.user_id = u.id

WHERE title IS NOT NULL AND p.user_id IN (SELECT user_id
FROM stackoverflow.badges
GROUP BY user_id
HAVING COUNT(DISTINCT id) > 1000)



10. Write a query to retrieve user data from the United States. Divide users into three groups based on the number of profile views:
* Users with profile views greater than or equal to 350 are assigned to Group 1.
* Users with profile views less than 350 but greater than or equal to 100 are assigned to Group 2.
* Users with profile views less than 100 are assigned to Group 3.
 
Display the user ID, the number of profile views, and the group in the final table. Users with zero post count should not be included in the final table.


SELECT DISTINCT id,
views,
CASE 
    WHEN views >= 350 THEN 1
    WHEN views <350 AND views >= 100 THEN 2
    WHEN views < 100 THEN 3
END
FROM stackoverflow.users 
WHERE location LIKE '%United States%' AND views > 0



11. Enhance the previous query. Display the leaders of each group - users who have the maximum number of views in their respective group. Display fields with user ID, group, and the number of views. Sort the table by the number of views in descending order and then by the user ID in ascending order.

SELECT id,group_3,views
FROM 
(SELECT DISTINCT id, views,group_3, MAX(views) OVER (PARTITION BY group_3 RANGE BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING) AS maximum
FROM (SELECT DISTINCT id,
views,
(CASE 
    WHEN views >= 350 THEN 1
    WHEN views <350 AND views >= 100 THEN 2
    WHEN views < 100 THEN 3
END ) AS group_3
FROM stackoverflow.users 
WHERE location LIKE '%United States%' AND views > 0
) AS st) AS stt
WHERE views = maximum
ORDER BY 3 DESC, 1

12. Calculate the daily growth of new users in November 2008. Create a table with the following fields:
* Day number
* Number of users registered on that day
* Cumulative total users.

SELECT *, DENSE_RANK() OVER (ORDER BY c1 DESC)
FROM 
(SELECT DISTINCT user_id, COUNT(id) OVER (PARTITION BY user_id) AS c1
FROM stackoverflow.badges
WHERE creation_date::date BETWEEN '2008-11-15' AND '2008-12-15'
) AS tmp
ORDER BY c1 DESC, user_id ASC
LIMIT 10





13. For each user who has written at least one post, find the interval between registration and the time of creating their first post. Display:
* User ID
* Time difference between registration and the first post.

SELECT DISTINCT u.id,FIRST_VALUE(p.creation_date) OVER (PARTITION BY user_id ORDER BY p.creation_date) - u.creation_date
FROM stackoverflow.users AS u JOIN
    stackoverflow.posts AS p ON p.user_id = u.id























